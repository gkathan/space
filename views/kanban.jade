include kanban_menu

script(src="/javascripts/components/mousetrap/mousetrap.min.js")

script(src="/javascripts/components/interact/interact.min.js")


script(src="/javascripts/kanban/kanban_config.js")
script(src="/javascripts/kanban/kanban_core.js")
script(src="/javascripts/kanban/kanban_util.js")
script(src="/javascripts/kanban/kanban_grid.js")
script(src="/javascripts/kanban/kanban_lanes.js")
script(src="/javascripts/kanban/kanban_queues.js")
script(src="/javascripts/kanban/kanban_postits.js")

script(src="/javascripts/kanban/kanban_items.js")
script(src="/javascripts/kanban/kanban_metrics.js")
script(src="/javascripts/kanban/kanban.js")
script(src="/javascripts/kanban/kanban_vision.js")
script(src="/javascripts/kanban/kanban_events.js")
script(src="/javascripts/kanban/kanban_addons.js")

script(src="/javascripts/whiteboard/whiteboard.js")
script(src="/javascripts/wiki2html.js")
script(src="/javascripts/components/flippant.js/flippant.min.js")

block content
	div.notifications.top-left
	div.row(style="margin-left:10px;margin-bottom:10px")
		
		
		// Button trigger modal
		button.btn.btn-primary.btn-xs(type="button" data-toggle="modal" data-target="#myModal")
			span board config
		// Button trigger modal
		button.btn.btn-success.btn-xs(type="button" data-toggle="modal" data-target="#v1EpicsModal")
			span v1 epics

		// Button trigger whiteboard
		button.btn.btn-warning.btn-xs(type="button" onclick="renderWhiteboard()")
			span show backboard

		// Button trigger kanbanboard
		button.btn.btn-warning.btn-xs(type="button" onclick="hideWhiteboard();showKanbanboard()")
			span show kanban board
		
		//Modal
		div.modal.fade.draggable(id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" )
			div.modal-dialog
				div.modal-content(style="opacity:1")
					div.modal-header
						button.close(type="button" data-dismiss="modal" aria-label="Close")
							span(aria-hidden="true") &times
						h3.modal-title(id="myModalLabel")
							| admin menu .....
					div.modal-body
						include board/includes/menu_svg_export.jade
						include board/includes/menu_metrics_multiselects.jade
						include board/includes/menu_visibility_switches.jade
						
					div.modal-footer
						button.btn.btn-default.btn-xs(type="button" data-dismiss="modal")
							span Close
						button.btn.btn-primary.btn-xs(type="button")
							span Save changes
		
		//v1EpicSelect Modal
		div.modal.fade(id="v1EpicsModal" tabindex="-1" role="dialog" aria-labelledby="v1EpicsModal" aria-hidden="true" )
			div.modal-dialog
				div.modal-content(style="opacity:1")
					div.modal-header
						button.close(type="button" data-dismiss="modal" aria-label="Close")
							span(aria-hidden="true") &times
						h4.modal-title(id="myModalLabel")
							
							|  v1 epics
					div.modal-body
						ul(id="v1epics")
							each e in epics
								li.draggable
									img(src="/images/v1/epic.gif" height="10px")
									span(style="font-size:10px") &nbsp; #{e.Number} - #{e.Name} 
	
	script(type="text/javascript").
		
		render("/images/svg/external.svg");
		
		//var el = document.getElementById('v1epics');
		//var sortable = Sortable.create(el,{});
		
		// target elements with the "draggable" class
		interact('.draggable')
		  .draggable({
		    // enable inertial throwing
		    inertia: true,
		    // keep the element within the area of it's parent
		    restrict: {
		      restriction: "parent",
		      endOnly: true,
		      elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
		    },

		    // call this function on every dragmove event
		    onmove: dragMoveListener,
		    // call this function on every dragend event
		    onend: function (event) {
		      var textEl = event.target.querySelector('p');

		      textEl && (textEl.textContent =
		        'moved a distance of '
		        + (Math.sqrt(event.dx * event.dx +
		                     event.dy * event.dy)|0) + 'px');
		    }
		  });

		  function dragMoveListener (event) {
		    var target = event.target,
		        // keep the dragged position in the data-x/data-y attributes
		        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
		        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

		    //	 translate the element
		    target.style.webkitTransform =
		    target.style.transform =
		      'translate(' + x + 'px, ' + y + 'px)';

		    // update the posiion attributes
		    target.setAttribute('data-x', x);
		    target.setAttribute('data-y', y);
		  }

		  // this is used later in the resizing demo
		  window.dragMoveListener = dragMoveListener;
		
		

						
		

		
