include ../kanban_menu

//link(rel='stylesheet', href='/stylesheets/material.css')


mixin statusLight(state,size,pulse)
	div(style="margin-left:5px;width: #{size}px;height: #{size}px;-webkit-animation: pulse #{mapState2Pulse(state)}s ease-out;animation: pulse #{mapState2Pulse(state)}s ease-out;-webkit-animation-iteration-count: infinite;-moz-animation-iteration-count: infinite;	animation-iteration-count: infinite;;-moz-border-radius: 50%; -webkit-border-radius: 50%; border-radius: 50%;background-color:#{mapState2Color(state)};margin-top:3px")

style.
	@-webkit-keyframes "pulse" {
	 0% {
		-webkit-transform: scale(1);
		opacity: 1.0;
	 }
	 25% {
		-webkit-transform: scale(1);
		opacity: 0.5;
	 }
	 50% {
		-webkit-transform: scale(1);
		opacity: 0.1;
	 }
	 75% {
		-webkit-transform: scale(1);
		opacity: 0.5;
	 }
	 100% {
		-webkit-transform: scale(1);
		opacity: 1.0;
	 }
	}

-	function mapState2Color(state){
-		if (state=="off") return "red";
-		if (state=="on") return "limegreen";
-		if (!state) return "lightgrey"
-		// red and green are ok
-		return state;
-	}

-	function mapState2Pulse(state){
-		if (state=="off") return 0;
-		if (state=="on") return 2;
-		return 0;
-	}


block content

div.panel(style=" position: relative;padding: 20px 40px 40px;display: block;background-color:white;width:800px;text-align: left;margin: 10px auto;")
	.panel-heading
		i.glyphicon.glyphicon-refresh(style="font-size:15px")
		span(style="font-size:20px") &nbsp;SYNC PROCESSES
	.panel-body(style="font-size:12px")
		
		table.table.table-striped.table-hover.table-condensed
			thead
				tr(style="line-height:24px")
					th(style="width:30px")
						
					th(style="width:120px") 
						|syncer
					th(style="width:50px;")
						|interval
					th(style="width:110px;")
						|last sync
					th(style="width:40px;")
						|status
					th(style="width:140px;")
						|last info
					th(style="width:80px")
						|force sync
			tbody
				each sync in syncers
					tr(style="line-height:18px")
						td 
							+statusLight(sync.sync.mode,12)
						td 
							a(href="#{sync.sync.url}" target="_new")|#{sync.name}
						td 
							|#{sync.sync.intervalMinutes}
						td(style="font-size:10px")
							span(id="#{sync.name}_timestamp")
						td(style="font-size:10px") 
							span(id="#{sync.name}_status")
						td(style="font-size:10px") 
							span(id="#{sync.name}_info")
						td(style="font-size:10px")
							a(id="sync_#{sync.name}" href="#" ) -- force sync --
				
			



include ../includes/material

script.
	$('#sync_employeeimages').on('click', function () {
		$.ajax({
		  url: '/api/space/rest/sync/employeeimages',
		  type: 'POST',
		  data: {
				}
		});
	});

	$('#sync_availability').on('click', function () {
		console.log("avreport request called...");
		$.ajax({
			url: '/api/space/rest/sync/availability',
			type: 'POST',
			data: {
				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});
	
	$('#sync_incident').on('click', function () {
		console.log("incidentsync request called...");
		$.ajax({
			url: '/api/space/rest/sync/incidents',
			type: 'POST',
			data: {

				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});
	
	$('#sync_soc_incidents').on('click', function () {
		console.log("soc incidentsync request called...");
		$.ajax({
			url: '/api/space/rest/sync/soc_incidents',
			type: 'POST',
			data: {

				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});
	
	$('#sync_problems').on('click', function () {
		console.log("problemsync request called...");
		$.ajax({
			url: '/api/space/rest/sync/problems',
			type: 'POST',
			data: {

				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});

	$('#sync_v1Epics').on('click', function () {
		console.log("v1EpicsSync request called...");
		$.ajax({
			url: '/api/space/rest/sync/v1Epics',
			type: 'POST',
			data: {

				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});

	$('#sync_apm_login').on('click', function () {
		console.log("sync_apm_betplacement request called...");
		$.ajax({
			url: '/api/space/rest/sync/apm/login',
			type: 'POST',
			data: {

				},
			success: function(data){
				console.log("[SUCCESS] synced:"+JSON.stringify(data));
			},
			error: function(err){
				console.log("[ERROR] :"+err.message);
			}
		});
	});
	
	$('#calc_availability').on('click', function () {
		console.log("calc_availability request called...");
		$.ajax({
			url: '/api/space/rest/availability/calculate',
			type: 'GET',
			data: {

				},
			success: function(data){
				alert("data: "+JSON.stringify(data));
			},
			error: function(err){
				alert("err: "+JSON.stringify(err));
			}
		});
	});
	// connect to the socket server
	var socket = io.connect(); 
	// if we get an "info" emit from the socket server then console.log the data we recive
	socket.on('syncUpdate', function (data) {
		console.log("*********** got a websocket synUpdate: "+data.from+" "+data.status+" "+data.timestamp)
		var _idTimestamp = '#'+data.from+'_timestamp';
		var _idStatus = '#'+data.from+'_status';
		var _idInfo = '#'+data.from+'_info';
		$(_idTimestamp).text(data.timestamp);
		$(_idTimestamp).effect( "highlight", "slow" );
		if (data.status=="[ERROR]") console.log("MAKE IT RED !");//$(_idTimestamp).effect( "color", "red" );
		$(_idStatus).text(data.status);
		$(_idStatus).effect( "highlight", "slow" );
		$(_idInfo).text(data.info);
		$(_idInfo).effect( "highlight", "slow" );
	});
