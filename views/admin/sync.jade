include ../kanban_menu

//link(rel='stylesheet', href='/stylesheets/material.css')


mixin statusLight(state,size,syncName,lastSyncStatus)
	div(id="statuslight_#{syncName}" style="margin-left:5px;width: #{size}px;height: #{size}px;animation: pulse #{mapState2Pulse(state,lastSyncStatus)}s ease-out;animation-iteration-count: infinite;;-moz-border-radius: 50%; -webkit-border-radius: 50%; border-radius: 50%;background-color:#{mapState2Color(state,lastSyncStatus)};margin-top:3px")

style.
	@-webkit-keyframes "pulse" {
	 0% {
		-webkit-transform: scale(1);
		opacity: 1.0;
	 }
	 25% {
		-webkit-transform: scale(1);
		opacity: 0.5;
	 }
	 50% {
		-webkit-transform: scale(1);
		opacity: 0.1;
	 }
	 75% {
		-webkit-transform: scale(1);
		opacity: 0.5;
	 }
	 100% {
		-webkit-transform: scale(1);
		opacity: 1.0;
	 }
	}

-	function mapState2Color(state,lastSyncStatus){
-		if (state=="off") return "lightgrey";
-		if (state=="on" && lastSyncStatus=="[SUCCESS]") return "limegreen";
-		if (state=="on" && lastSyncStatus=="[ERROR]") return "red";

-		if (!state) return "lightgrey"
-		// red and green are ok
-		return state;
-	}

-	function mapState2Pulse(state,lastSyncStatus){
-		if (state=="off") return 0;
-		if (state=="on" && lastSyncStatus=="[ERROR]") return .8;
-		if (state=="on" && lastSyncStatus=="[SUCCESS]") return 2;
-		return 0;
-	}

-	function formatTime(time){
- 	var d = moment.duration(time);
-		if (d>=86400000) return d.format("d[d] h:mm:ss", { trim: false });
-		return d.format("h:mm:ss", { trim: false });
-	}

block content

div.panel(style=" position: relative;padding: 20px 40px 40px;display: block;background-color:white;width:900px;text-align: left;margin: 10px auto;")
	.panel-heading
		i.glyphicon.glyphicon-refresh(style="font-size:15px")
		span(style="font-size:20px") &nbsp;SYNC PROCESSES
		if config.syncUpdate.urlSSL
			div
				|syncserver: 
				a(href="#{config.syncUpdate.urlSSL}" target="_new") #{config.syncUpdate.urlSSL}
	.panel-body(style="font-size:12px")
		table.table.table-striped.table-hover.table-condensed
			thead
				tr(style="line-height:24px")
					th(style="width:30px")

					th(style="width:120px") 
						|syncer
					th(style="width:50px;")
						|interval
					th(style="width:110px;")
						|last sync
					th(style="width:60px;")
						|status
					th(style="width:100px;text-align:center")
						|type
					th(style="width:140px;")
						|last info
					th(style="width:80px")
						|force sync
			tbody
				if syncers
					each sync in syncers
						-if (!sync.syncInfo) sync["syncInfo"]={status:"[UNDEFINED]"}
						tr(style="line-height:18px")
							td 
								+statusLight(sync.sync.mode,12,sync.name,sync.syncInfo.status)
							td 
								a(href="#{sync.sync.url}" target="_new")|#{sync.name}
							td 
								|#{formatTime(sync.sync.intervalMinutes*60*1000)}
							td(style="font-size:10px")
								span(id="#{sync.name}_timestamp")  
									if sync.syncInfo
										|#{moment(sync.syncInfo.lastSync).format("YYYY-MM-DD HH:mm:ss")}
								
								
							td(style="font-size:10px;font-weight:bold") 
								span(id="#{sync.name}_status")
									if sync.syncInfo
										|#{sync.syncInfo.status}

							td(style="font-size:10px;font-weight:bold;text-align:center") 
								span(id="#{sync.name}_type")
									if sync.syncInfo
										|#{sync.syncInfo.type}
								
							td(style="font-size:10px") 
								span(id="#{sync.name}_info")
									if sync.syncInfo
										|#{sync.syncInfo.message}
								
							td(style="font-size:10px")
								a.btn.btn-xs.btn-warning(id="sync_#{sync.name}"  ) -- force sync --
				else
					|--- no syncers found ---
					if error
						div(style="font-size:12px;color:red")
							|error: #{error}
		br
		div(id="ticker" style="font-size:8px")

include ../includes/material

script.
	$('#sync_employeeimages').on('click', function () {
		$.ajax({
		  url: '/api/space/rest/sync/employeeimages',
		  type: 'POST',
		  data: {
				}
		});
	});

	$('#sync_availability').on('click', function () {
		console.log("avreport request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"availability"});
	});
	
	$('#sync_incidents').on('click', function () {
		console.log("incidentsync request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"incidents"});
	});
	
	$('#sync_soc_outages').on('click', function () {
		console.log("soc outagessync request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"soc_outages"});
	});
	
	$('#sync_soc_services').on('click', function () {
		console.log("soc servicessync request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"soc_services"});
	});


	$('#sync_problems').on('click', function () {
		console.log("problemsync request called...");
			spaceSyncerSocket.emit("forceSync",{syncer:"problems"});
	});

	$('#sync_v1epics').on('click', function () {
		console.log("v1EpicsSync request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"v1epics"});

	});
	
		$('#sync_v1data').on('click', function () {
			console.log("v1DataSync request called...");
			spaceSyncerSocket.emit("forceSync",{syncer:"v1data"});
			console.log("socket emitted...");
		});

	$('#sync_apm_login').on('click', function () {
		console.log("sync_apm_betplacement request called...");
		spaceSyncerSocket.emit("forceSync",{syncer:"apm.login"});

	});

	// connect to the socket server
	//var socket = io.connect('http://localhost:3333'); 
	var _server;
	// check whether we run in SSL 
	if (window.location.protocol == "https:")
		_server= '#{config.syncUpdate.urlSSL}';
	else 
		_server= '#{config.syncUpdate.url}';
	
	
	console.log("----- _socketserver: "+_server);
	var spaceSyncerSocket = io.connect(_server); 
	// if we get an "info" emit from the socket server then console.log the data we recive
	spaceSyncerSocket.on('syncUpdate', function (data) {
		console.log("*********** got a websocket synUpdate: "+data.from+" "+data.status+" "+data.timestamp);
		
		var _idTimestamp = '#'+data.from+'_timestamp';
		var _idStatus = '#'+data.from+'_status';
		var _idInfo = '#'+data.from+'_info';
		var _idType = '#'+data.from+'_type';
		
		var _idStatusLight = '#statuslight_'+data.from;
		
		
		$(_idTimestamp).text(moment(data.timestamp).format("YYYY-MM-DD HH:mm:ss"));
		$(_idTimestamp).effect( "highlight", "slow" );
		if (data.status=="[ERROR]") $(_idTimestamp).animate({color: "red"}, 1000 );
		else if (data.status=="[SUCCESS]") $(_idTimestamp).animate({color: "green"}, 1000 );
		$(_idStatus).text(data.status);
		$(_idStatus).effect( "highlight", "slow" );
		if (data.status=="[ERROR]"){
			$(_idStatus).animate({color: "red"}, 1000 );
			
			$(_idStatusLight).css("background-color","red");
			$(_idStatusLight).css("animation"," pulse .8s ease-out");
			$(_idStatusLight).css("animation-iteration-count"," infinite");
			
			console.log("_idStatusLight: "+_idStatusLight);
		} 
		else if (data.status=="[SUCCESS]"){
			 $(_idStatus).animate({color: "green"}, 1000 );
			 $(_idStatusLight).css("background-color","limegreen");
			 $(_idStatusLight).css("animation","pulse 2s ease-out");
			$(_idStatusLight).css("animation-iteration-count"," infinite");
			 console.log("_idStatusLight: "+_idStatusLight);
		}	
		$(_idType).text(data.type);
		$(_idType).effect( "highlight", "slow" );
	
		$(_idInfo).text(data.info);
		$(_idInfo).effect( "highlight", "slow" );
		if (data.status=="[ERROR]") $(_idInfo).animate({color: "red"}, 1000 );
		else if (data.status=="[SUCCESS]") $(_idInfo).animate({color: "green"}, 1000 );
		
		
		
	});
	
	spaceSyncerSocket.on('incidentTickerUpdate', function (data) {
		console.log("ticker update: "+data);
		
		//$("#ticker").html(JSON.stringify(data));
	});
	
	
	
	
